version: '3.7'
services:
  jupyter:
    image: abc1233108/darknet_sneaker
    container_name: line-chat-bot-jupyter 
    ports:
      - "5000:5000"
      - "8888:8888"
    volumes:
      - ./:/root/linechatbot
    tty: true
    stdin_open: true
    networks:
      - chatbot-net
#    command: start.sh jupyter notebook --NotebookApp.token=''

#  ngrok:
#    image: wernight/ngrok
#    container_name: ngrok
#    tty: true
#    stdin_open: true
#    ports:
#      - "4040"
#    networks:
#      - chatbot-net
#    command: ngrok http line-chat-bot-jupyter:5000
#    depends_on:
#      - jupyter
#    links:
#      - jupyter

  serveo:
    image: aeon33system/serveo-alpine:v1
    container_name: chatbot_serveo
    tty: true
    stdin_open: true
    networks:
    - chatbot-net
    command: autossh -M 0 -R sneakerdb103g3.serveo.net:80:line-chat-bot-jupyter:5000 -o StrictHostKeyChecking=no serveo.net

  mysql:
    image: mariadb:10.1
    container_name: chatbot_db
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
    volumes:
      - ./mysql_data:/var/lib/mysql
    networks:
      - chatbot-net
    links:
      - jupyter

  mongo:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    volumes:
      - ./mongodb:/data/db
    restart: always
    networks:
      - chatbot-net
    expose:
      - 6016
    ports:
      - "27017:27017"
#    command: mongod --replSet 'rs1'
    links:
      - jupyter

  adminmongo:
    image: mrvautin/adminmongo
    container_name: adminmongo
    hostname: adminmongo
    networks:
      - chatbot-net
    ports:
      - "1234:1234"
    environment:
      - HOST=0.0.0.0

  pmte:
    build: 
      context: ./dockerfile
      dockerfile: dockerfile-pmte
    container_name: pmte
    command: mongo-connector -m mongodb:27017 -t elasticsearch:9200 -d elastic2_doc_manager -n es.userevent,es.images
    depends_on:
      - elasticsearch
    links:
      - mongo
      - elasticsearch
    restart: always
    networks:
      - chatbot-net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
    hostname: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
#    volumes:
#      - ./elasticsearch/data:/usr/share/elasticsearch/data
#      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
    networks:
      - chatbot-net

  logstash:
    image: docker.elastic.co/logstash/logstash:6.2.4
    hostname: logstash
    container_name: logstash
    ports:
      - "5001:5000"
    networks:
      - chatbot-net
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:6.2.4
    hostname: kibana
    container_name: kibana
    ports:
      - "5601:5601"
    networks:
      - chatbot-net
    depends_on:
      - elasticsearch

  cloudera:
    image: abc1233108/cloudera:v2
    hostname: quickstart.cloudera
    container_name: quickstart.cloudera
    stdin_open: true
    tty: true
    user: cloudera
    working_dir: /home/cloudera
    privileged: true
    ports: 
      - "8080:8080"
      - "8889:8888"
      - "50070:50070"
      - "50075:50075"
    networks:
      - chatbot-net

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - chatbot-net
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.11-0.11.0.3
    container_name: kafka
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    networks:
      - chatbot-net
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: 192.168.99.100
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://35.194.196.242:9092 #PLAINTEXT://[Cloud.Plateform.outer.ip]:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka:/kafka

networks:
  chatbot-net:
